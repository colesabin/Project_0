%top{
/* Python source normalization for plagiarism checker
 * (example only)
 * 2019 Fall version with RE/flex,
 *
 */

 #include <iostream>
 #include <fstream>
%}

%option noyywrap
%option namespace=yy lexer=Lexer lex=yylex

%x q
%x Q

%%

\' { out() << "&lsquo;"; start(q); }
\" { out() << "&ldquo;"; start(Q); }

<q>\' { out() << "&rsquo;"; start(INITIAL); }
<Q>\" { out() << "&rdquo;"; start(INITIAL); }
<q,Q>. echo();
<q,Q>[\\]. echo();
<q,Q>([ \n\r\t]|#.*)*\n  { out() << "<br /> \n"; }
([ \n\r\t]|#.*)*\n  { out() << "<br /> \n"; }
. echo();
(\\\") { out() << "\""; }
<<EOF>>  { return 0; }

%%

/* For simple filters, the main program can go here. */

int main(int argc, char **argv)
{
  FILE *fd = stdin;
  if (argc > 1 && (fd = fopen(argv[1], "r")) == NULL)
    exit(EXIT_FAILURE);
  std::ofstream of("output.html", std::ofstream::out);
  if (!of)
    exit(EXIT_FAILURE);
  yy::Lexer(fd, of).yylex();
  of.close();
  if (fd != stdin)
    fclose(fd);
  return 0;
}
